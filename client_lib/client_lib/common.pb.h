// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace qp_server {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_common_2eproto();
void protobuf_AssignDesc_common_2eproto();
void protobuf_ShutdownFile_common_2eproto();

class qp_packet;
class qp_login_req;
class qp_user_data;
class qp_login_rsp;
class qp_create_room_req;
class qp_create_room_rsp;
class qp_join_room_req;
class qp_room_user;
class qp_join_room_rsp;
class qp_join_room_push;
class qp_ready_req;
class qp_ready_rsp;
class qp_ready_push;
class qp_exit_room_req;
class qp_exit_room_rsp;
class qp_exit_room_push;
class qp_room_dismiss_push;
class qp_game_data;
class qp_ping_req;
class qp_ping_rsp;

enum ws_cmd {
  CMD_QP_LOGIN_REQ = 1001,
  CMD_QP_LOGIN_RSP = 1002,
  CMD_QP_CREATE_ROOM_REQ = 1003,
  CMD_QP_CREATE_ROOM_RSP = 1004,
  CMD_QP_JOIN_ROOM_REQ = 1005,
  CMD_QP_JOIN_ROOM_RSP = 1006,
  CMD_QP_JOIN_ROOM_PUSH = 1007,
  CMD_QP_READY_REQ = 1008,
  CMD_QP_READY_RSP = 1009,
  CMD_QP_READY_PUSH = 1010,
  CMD_QP_EXIT_ROOM_REQ = 1011,
  CMD_QP_EXIT_ROOM_RSP = 1012,
  CMD_QP_EXIT_ROOM_PUSH = 1013,
  CMD_QP_ROOM_DISSMISS_PUSH = 1014,
  CMD_QP_GAME_DATA = 1015,
  CMD_QP_PING_REQ = 1016,
  CMD_QP_PING_RSP = 1017
};
bool ws_cmd_IsValid(int value);
const ws_cmd ws_cmd_MIN = CMD_QP_LOGIN_REQ;
const ws_cmd ws_cmd_MAX = CMD_QP_PING_RSP;
const int ws_cmd_ARRAYSIZE = ws_cmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* ws_cmd_descriptor();
inline const ::std::string& ws_cmd_Name(ws_cmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    ws_cmd_descriptor(), value);
}
inline bool ws_cmd_Parse(
    const ::std::string& name, ws_cmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ws_cmd>(
    ws_cmd_descriptor(), name, value);
}
// ===================================================================

class qp_packet : public ::google::protobuf::Message {
 public:
  qp_packet();
  virtual ~qp_packet();

  qp_packet(const qp_packet& from);

  inline qp_packet& operator=(const qp_packet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qp_packet& default_instance();

  void Swap(qp_packet* other);

  // implements Message ----------------------------------------------

  qp_packet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qp_packet& from);
  void MergeFrom(const qp_packet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::int32 cmd() const;
  inline void set_cmd(::google::protobuf::int32 value);

  // required uint32 seq_id = 2;
  inline bool has_seq_id() const;
  inline void clear_seq_id();
  static const int kSeqIdFieldNumber = 2;
  inline ::google::protobuf::uint32 seq_id() const;
  inline void set_seq_id(::google::protobuf::uint32 value);

  // optional bytes serialized = 3;
  inline bool has_serialized() const;
  inline void clear_serialized();
  static const int kSerializedFieldNumber = 3;
  inline const ::std::string& serialized() const;
  inline void set_serialized(const ::std::string& value);
  inline void set_serialized(const char* value);
  inline void set_serialized(const void* value, size_t size);
  inline ::std::string* mutable_serialized();
  inline ::std::string* release_serialized();
  inline void set_allocated_serialized(::std::string* serialized);

  // @@protoc_insertion_point(class_scope:qp_server.qp_packet)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_seq_id();
  inline void clear_has_seq_id();
  inline void set_has_serialized();
  inline void clear_has_serialized();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cmd_;
  ::google::protobuf::uint32 seq_id_;
  ::std::string* serialized_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static qp_packet* default_instance_;
};
// -------------------------------------------------------------------

class qp_login_req : public ::google::protobuf::Message {
 public:
  qp_login_req();
  virtual ~qp_login_req();

  qp_login_req(const qp_login_req& from);

  inline qp_login_req& operator=(const qp_login_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qp_login_req& default_instance();

  void Swap(qp_login_req* other);

  // implements Message ----------------------------------------------

  qp_login_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qp_login_req& from);
  void MergeFrom(const qp_login_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // @@protoc_insertion_point(class_scope:qp_server.qp_login_req)
 private:
  inline void set_has_account();
  inline void clear_has_account();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static qp_login_req* default_instance_;
};
// -------------------------------------------------------------------

class qp_user_data : public ::google::protobuf::Message {
 public:
  qp_user_data();
  virtual ~qp_user_data();

  qp_user_data(const qp_user_data& from);

  inline qp_user_data& operator=(const qp_user_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qp_user_data& default_instance();

  void Swap(qp_user_data* other);

  // implements Message ----------------------------------------------

  qp_user_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qp_user_data& from);
  void MergeFrom(const qp_user_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required int64 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int64 gold() const;
  inline void set_gold(::google::protobuf::int64 value);

  // required string avatar_url = 3;
  inline bool has_avatar_url() const;
  inline void clear_avatar_url();
  static const int kAvatarUrlFieldNumber = 3;
  inline const ::std::string& avatar_url() const;
  inline void set_avatar_url(const ::std::string& value);
  inline void set_avatar_url(const char* value);
  inline void set_avatar_url(const char* value, size_t size);
  inline ::std::string* mutable_avatar_url();
  inline ::std::string* release_avatar_url();
  inline void set_allocated_avatar_url(::std::string* avatar_url);

  // required string nick_name = 4;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 4;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // @@protoc_insertion_point(class_scope:qp_server.qp_user_data)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_avatar_url();
  inline void clear_has_avatar_url();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 gold_;
  ::std::string* avatar_url_;
  ::std::string* nick_name_;
  ::google::protobuf::uint32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static qp_user_data* default_instance_;
};
// -------------------------------------------------------------------

class qp_login_rsp : public ::google::protobuf::Message {
 public:
  qp_login_rsp();
  virtual ~qp_login_rsp();

  qp_login_rsp(const qp_login_rsp& from);

  inline qp_login_rsp& operator=(const qp_login_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qp_login_rsp& default_instance();

  void Swap(qp_login_rsp* other);

  // implements Message ----------------------------------------------

  qp_login_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qp_login_rsp& from);
  void MergeFrom(const qp_login_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional .qp_server.qp_user_data data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::qp_server::qp_user_data& data() const;
  inline ::qp_server::qp_user_data* mutable_data();
  inline ::qp_server::qp_user_data* release_data();
  inline void set_allocated_data(::qp_server::qp_user_data* data);

  // @@protoc_insertion_point(class_scope:qp_server.qp_login_rsp)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::qp_server::qp_user_data* data_;
  ::google::protobuf::int32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static qp_login_rsp* default_instance_;
};
// -------------------------------------------------------------------

class qp_create_room_req : public ::google::protobuf::Message {
 public:
  qp_create_room_req();
  virtual ~qp_create_room_req();

  qp_create_room_req(const qp_create_room_req& from);

  inline qp_create_room_req& operator=(const qp_create_room_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qp_create_room_req& default_instance();

  void Swap(qp_create_room_req* other);

  // implements Message ----------------------------------------------

  qp_create_room_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qp_create_room_req& from);
  void MergeFrom(const qp_create_room_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 room_type = 1;
  inline bool has_room_type() const;
  inline void clear_room_type();
  static const int kRoomTypeFieldNumber = 1;
  inline ::google::protobuf::int32 room_type() const;
  inline void set_room_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:qp_server.qp_create_room_req)
 private:
  inline void set_has_room_type();
  inline void clear_has_room_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 room_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static qp_create_room_req* default_instance_;
};
// -------------------------------------------------------------------

class qp_create_room_rsp : public ::google::protobuf::Message {
 public:
  qp_create_room_rsp();
  virtual ~qp_create_room_rsp();

  qp_create_room_rsp(const qp_create_room_rsp& from);

  inline qp_create_room_rsp& operator=(const qp_create_room_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qp_create_room_rsp& default_instance();

  void Swap(qp_create_room_rsp* other);

  // implements Message ----------------------------------------------

  qp_create_room_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qp_create_room_rsp& from);
  void MergeFrom(const qp_create_room_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 room_id = 2;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 2;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional int32 seat_number = 3;
  inline bool has_seat_number() const;
  inline void clear_seat_number();
  static const int kSeatNumberFieldNumber = 3;
  inline ::google::protobuf::int32 seat_number() const;
  inline void set_seat_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:qp_server.qp_create_room_rsp)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_seat_number();
  inline void clear_has_seat_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 room_id_;
  ::google::protobuf::int32 seat_number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static qp_create_room_rsp* default_instance_;
};
// -------------------------------------------------------------------

class qp_join_room_req : public ::google::protobuf::Message {
 public:
  qp_join_room_req();
  virtual ~qp_join_room_req();

  qp_join_room_req(const qp_join_room_req& from);

  inline qp_join_room_req& operator=(const qp_join_room_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qp_join_room_req& default_instance();

  void Swap(qp_join_room_req* other);

  // implements Message ----------------------------------------------

  qp_join_room_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qp_join_room_req& from);
  void MergeFrom(const qp_join_room_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:qp_server.qp_join_room_req)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static qp_join_room_req* default_instance_;
};
// -------------------------------------------------------------------

class qp_room_user : public ::google::protobuf::Message {
 public:
  qp_room_user();
  virtual ~qp_room_user();

  qp_room_user(const qp_room_user& from);

  inline qp_room_user& operator=(const qp_room_user& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qp_room_user& default_instance();

  void Swap(qp_room_user* other);

  // implements Message ----------------------------------------------

  qp_room_user* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qp_room_user& from);
  void MergeFrom(const qp_room_user& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .qp_server.qp_user_data user_data = 1;
  inline bool has_user_data() const;
  inline void clear_user_data();
  static const int kUserDataFieldNumber = 1;
  inline const ::qp_server::qp_user_data& user_data() const;
  inline ::qp_server::qp_user_data* mutable_user_data();
  inline ::qp_server::qp_user_data* release_user_data();
  inline void set_allocated_user_data(::qp_server::qp_user_data* user_data);

  // required int32 seat_number = 2;
  inline bool has_seat_number() const;
  inline void clear_seat_number();
  static const int kSeatNumberFieldNumber = 2;
  inline ::google::protobuf::int32 seat_number() const;
  inline void set_seat_number(::google::protobuf::int32 value);

  // required bool is_ready = 3;
  inline bool has_is_ready() const;
  inline void clear_is_ready();
  static const int kIsReadyFieldNumber = 3;
  inline bool is_ready() const;
  inline void set_is_ready(bool value);

  // @@protoc_insertion_point(class_scope:qp_server.qp_room_user)
 private:
  inline void set_has_user_data();
  inline void clear_has_user_data();
  inline void set_has_seat_number();
  inline void clear_has_seat_number();
  inline void set_has_is_ready();
  inline void clear_has_is_ready();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::qp_server::qp_user_data* user_data_;
  ::google::protobuf::int32 seat_number_;
  bool is_ready_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static qp_room_user* default_instance_;
};
// -------------------------------------------------------------------

class qp_join_room_rsp : public ::google::protobuf::Message {
 public:
  qp_join_room_rsp();
  virtual ~qp_join_room_rsp();

  qp_join_room_rsp(const qp_join_room_rsp& from);

  inline qp_join_room_rsp& operator=(const qp_join_room_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qp_join_room_rsp& default_instance();

  void Swap(qp_join_room_rsp* other);

  // implements Message ----------------------------------------------

  qp_join_room_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qp_join_room_rsp& from);
  void MergeFrom(const qp_join_room_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 seat_number = 2;
  inline bool has_seat_number() const;
  inline void clear_seat_number();
  static const int kSeatNumberFieldNumber = 2;
  inline ::google::protobuf::int32 seat_number() const;
  inline void set_seat_number(::google::protobuf::int32 value);

  // optional bool is_ready = 3;
  inline bool has_is_ready() const;
  inline void clear_is_ready();
  static const int kIsReadyFieldNumber = 3;
  inline bool is_ready() const;
  inline void set_is_ready(bool value);

  // repeated .qp_server.qp_room_user room_user = 4;
  inline int room_user_size() const;
  inline void clear_room_user();
  static const int kRoomUserFieldNumber = 4;
  inline const ::qp_server::qp_room_user& room_user(int index) const;
  inline ::qp_server::qp_room_user* mutable_room_user(int index);
  inline ::qp_server::qp_room_user* add_room_user();
  inline const ::google::protobuf::RepeatedPtrField< ::qp_server::qp_room_user >&
      room_user() const;
  inline ::google::protobuf::RepeatedPtrField< ::qp_server::qp_room_user >*
      mutable_room_user();

  // @@protoc_insertion_point(class_scope:qp_server.qp_join_room_rsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_seat_number();
  inline void clear_has_seat_number();
  inline void set_has_is_ready();
  inline void clear_has_is_ready();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 seat_number_;
  ::google::protobuf::RepeatedPtrField< ::qp_server::qp_room_user > room_user_;
  bool is_ready_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static qp_join_room_rsp* default_instance_;
};
// -------------------------------------------------------------------

class qp_join_room_push : public ::google::protobuf::Message {
 public:
  qp_join_room_push();
  virtual ~qp_join_room_push();

  qp_join_room_push(const qp_join_room_push& from);

  inline qp_join_room_push& operator=(const qp_join_room_push& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qp_join_room_push& default_instance();

  void Swap(qp_join_room_push* other);

  // implements Message ----------------------------------------------

  qp_join_room_push* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qp_join_room_push& from);
  void MergeFrom(const qp_join_room_push& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .qp_server.qp_room_user room_user = 1;
  inline bool has_room_user() const;
  inline void clear_room_user();
  static const int kRoomUserFieldNumber = 1;
  inline const ::qp_server::qp_room_user& room_user() const;
  inline ::qp_server::qp_room_user* mutable_room_user();
  inline ::qp_server::qp_room_user* release_room_user();
  inline void set_allocated_room_user(::qp_server::qp_room_user* room_user);

  // @@protoc_insertion_point(class_scope:qp_server.qp_join_room_push)
 private:
  inline void set_has_room_user();
  inline void clear_has_room_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::qp_server::qp_room_user* room_user_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static qp_join_room_push* default_instance_;
};
// -------------------------------------------------------------------

class qp_ready_req : public ::google::protobuf::Message {
 public:
  qp_ready_req();
  virtual ~qp_ready_req();

  qp_ready_req(const qp_ready_req& from);

  inline qp_ready_req& operator=(const qp_ready_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qp_ready_req& default_instance();

  void Swap(qp_ready_req* other);

  // implements Message ----------------------------------------------

  qp_ready_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qp_ready_req& from);
  void MergeFrom(const qp_ready_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool ready_state = 1;
  inline bool has_ready_state() const;
  inline void clear_ready_state();
  static const int kReadyStateFieldNumber = 1;
  inline bool ready_state() const;
  inline void set_ready_state(bool value);

  // @@protoc_insertion_point(class_scope:qp_server.qp_ready_req)
 private:
  inline void set_has_ready_state();
  inline void clear_has_ready_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool ready_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static qp_ready_req* default_instance_;
};
// -------------------------------------------------------------------

class qp_ready_rsp : public ::google::protobuf::Message {
 public:
  qp_ready_rsp();
  virtual ~qp_ready_rsp();

  qp_ready_rsp(const qp_ready_rsp& from);

  inline qp_ready_rsp& operator=(const qp_ready_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qp_ready_rsp& default_instance();

  void Swap(qp_ready_rsp* other);

  // implements Message ----------------------------------------------

  qp_ready_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qp_ready_rsp& from);
  void MergeFrom(const qp_ready_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional bool ready_state = 2;
  inline bool has_ready_state() const;
  inline void clear_ready_state();
  static const int kReadyStateFieldNumber = 2;
  inline bool ready_state() const;
  inline void set_ready_state(bool value);

  // @@protoc_insertion_point(class_scope:qp_server.qp_ready_rsp)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_ready_state();
  inline void clear_has_ready_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 state_;
  bool ready_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static qp_ready_rsp* default_instance_;
};
// -------------------------------------------------------------------

class qp_ready_push : public ::google::protobuf::Message {
 public:
  qp_ready_push();
  virtual ~qp_ready_push();

  qp_ready_push(const qp_ready_push& from);

  inline qp_ready_push& operator=(const qp_ready_push& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qp_ready_push& default_instance();

  void Swap(qp_ready_push* other);

  // implements Message ----------------------------------------------

  qp_ready_push* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qp_ready_push& from);
  void MergeFrom(const qp_ready_push& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seat_number = 1;
  inline bool has_seat_number() const;
  inline void clear_seat_number();
  static const int kSeatNumberFieldNumber = 1;
  inline ::google::protobuf::int32 seat_number() const;
  inline void set_seat_number(::google::protobuf::int32 value);

  // required bool ready_state = 2;
  inline bool has_ready_state() const;
  inline void clear_ready_state();
  static const int kReadyStateFieldNumber = 2;
  inline bool ready_state() const;
  inline void set_ready_state(bool value);

  // @@protoc_insertion_point(class_scope:qp_server.qp_ready_push)
 private:
  inline void set_has_seat_number();
  inline void clear_has_seat_number();
  inline void set_has_ready_state();
  inline void clear_has_ready_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_number_;
  bool ready_state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static qp_ready_push* default_instance_;
};
// -------------------------------------------------------------------

class qp_exit_room_req : public ::google::protobuf::Message {
 public:
  qp_exit_room_req();
  virtual ~qp_exit_room_req();

  qp_exit_room_req(const qp_exit_room_req& from);

  inline qp_exit_room_req& operator=(const qp_exit_room_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qp_exit_room_req& default_instance();

  void Swap(qp_exit_room_req* other);

  // implements Message ----------------------------------------------

  qp_exit_room_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qp_exit_room_req& from);
  void MergeFrom(const qp_exit_room_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seat_number = 1;
  inline bool has_seat_number() const;
  inline void clear_seat_number();
  static const int kSeatNumberFieldNumber = 1;
  inline ::google::protobuf::int32 seat_number() const;
  inline void set_seat_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:qp_server.qp_exit_room_req)
 private:
  inline void set_has_seat_number();
  inline void clear_has_seat_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static qp_exit_room_req* default_instance_;
};
// -------------------------------------------------------------------

class qp_exit_room_rsp : public ::google::protobuf::Message {
 public:
  qp_exit_room_rsp();
  virtual ~qp_exit_room_rsp();

  qp_exit_room_rsp(const qp_exit_room_rsp& from);

  inline qp_exit_room_rsp& operator=(const qp_exit_room_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qp_exit_room_rsp& default_instance();

  void Swap(qp_exit_room_rsp* other);

  // implements Message ----------------------------------------------

  qp_exit_room_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qp_exit_room_rsp& from);
  void MergeFrom(const qp_exit_room_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:qp_server.qp_exit_room_rsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static qp_exit_room_rsp* default_instance_;
};
// -------------------------------------------------------------------

class qp_exit_room_push : public ::google::protobuf::Message {
 public:
  qp_exit_room_push();
  virtual ~qp_exit_room_push();

  qp_exit_room_push(const qp_exit_room_push& from);

  inline qp_exit_room_push& operator=(const qp_exit_room_push& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qp_exit_room_push& default_instance();

  void Swap(qp_exit_room_push* other);

  // implements Message ----------------------------------------------

  qp_exit_room_push* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qp_exit_room_push& from);
  void MergeFrom(const qp_exit_room_push& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seat_number = 1;
  inline bool has_seat_number() const;
  inline void clear_seat_number();
  static const int kSeatNumberFieldNumber = 1;
  inline ::google::protobuf::int32 seat_number() const;
  inline void set_seat_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:qp_server.qp_exit_room_push)
 private:
  inline void set_has_seat_number();
  inline void clear_has_seat_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static qp_exit_room_push* default_instance_;
};
// -------------------------------------------------------------------

class qp_room_dismiss_push : public ::google::protobuf::Message {
 public:
  qp_room_dismiss_push();
  virtual ~qp_room_dismiss_push();

  qp_room_dismiss_push(const qp_room_dismiss_push& from);

  inline qp_room_dismiss_push& operator=(const qp_room_dismiss_push& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qp_room_dismiss_push& default_instance();

  void Swap(qp_room_dismiss_push* other);

  // implements Message ----------------------------------------------

  qp_room_dismiss_push* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qp_room_dismiss_push& from);
  void MergeFrom(const qp_room_dismiss_push& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:qp_server.qp_room_dismiss_push)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 room_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static qp_room_dismiss_push* default_instance_;
};
// -------------------------------------------------------------------

class qp_game_data : public ::google::protobuf::Message {
 public:
  qp_game_data();
  virtual ~qp_game_data();

  qp_game_data(const qp_game_data& from);

  inline qp_game_data& operator=(const qp_game_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qp_game_data& default_instance();

  void Swap(qp_game_data* other);

  // implements Message ----------------------------------------------

  qp_game_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qp_game_data& from);
  void MergeFrom(const qp_game_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string game_name = 1;
  inline bool has_game_name() const;
  inline void clear_game_name();
  static const int kGameNameFieldNumber = 1;
  inline const ::std::string& game_name() const;
  inline void set_game_name(const ::std::string& value);
  inline void set_game_name(const char* value);
  inline void set_game_name(const char* value, size_t size);
  inline ::std::string* mutable_game_name();
  inline ::std::string* release_game_name();
  inline void set_allocated_game_name(::std::string* game_name);

  // required bytes game_data = 2;
  inline bool has_game_data() const;
  inline void clear_game_data();
  static const int kGameDataFieldNumber = 2;
  inline const ::std::string& game_data() const;
  inline void set_game_data(const ::std::string& value);
  inline void set_game_data(const char* value);
  inline void set_game_data(const void* value, size_t size);
  inline ::std::string* mutable_game_data();
  inline ::std::string* release_game_data();
  inline void set_allocated_game_data(::std::string* game_data);

  // @@protoc_insertion_point(class_scope:qp_server.qp_game_data)
 private:
  inline void set_has_game_name();
  inline void clear_has_game_name();
  inline void set_has_game_data();
  inline void clear_has_game_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* game_name_;
  ::std::string* game_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static qp_game_data* default_instance_;
};
// -------------------------------------------------------------------

class qp_ping_req : public ::google::protobuf::Message {
 public:
  qp_ping_req();
  virtual ~qp_ping_req();

  qp_ping_req(const qp_ping_req& from);

  inline qp_ping_req& operator=(const qp_ping_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qp_ping_req& default_instance();

  void Swap(qp_ping_req* other);

  // implements Message ----------------------------------------------

  qp_ping_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qp_ping_req& from);
  void MergeFrom(const qp_ping_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seat_number = 1;
  inline bool has_seat_number() const;
  inline void clear_seat_number();
  static const int kSeatNumberFieldNumber = 1;
  inline ::google::protobuf::int32 seat_number() const;
  inline void set_seat_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:qp_server.qp_ping_req)
 private:
  inline void set_has_seat_number();
  inline void clear_has_seat_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static qp_ping_req* default_instance_;
};
// -------------------------------------------------------------------

class qp_ping_rsp : public ::google::protobuf::Message {
 public:
  qp_ping_rsp();
  virtual ~qp_ping_rsp();

  qp_ping_rsp(const qp_ping_rsp& from);

  inline qp_ping_rsp& operator=(const qp_ping_rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const qp_ping_rsp& default_instance();

  void Swap(qp_ping_rsp* other);

  // implements Message ----------------------------------------------

  qp_ping_rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const qp_ping_rsp& from);
  void MergeFrom(const qp_ping_rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seat_number = 1;
  inline bool has_seat_number() const;
  inline void clear_seat_number();
  static const int kSeatNumberFieldNumber = 1;
  inline ::google::protobuf::int32 seat_number() const;
  inline void set_seat_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:qp_server.qp_ping_rsp)
 private:
  inline void set_has_seat_number();
  inline void clear_has_seat_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();

  void InitAsDefaultInstance();
  static qp_ping_rsp* default_instance_;
};
// ===================================================================


// ===================================================================

// qp_packet

// required int32 cmd = 1;
inline bool qp_packet::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qp_packet::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qp_packet::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qp_packet::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 qp_packet::cmd() const {
  return cmd_;
}
inline void qp_packet::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// required uint32 seq_id = 2;
inline bool qp_packet::has_seq_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void qp_packet::set_has_seq_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void qp_packet::clear_has_seq_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void qp_packet::clear_seq_id() {
  seq_id_ = 0u;
  clear_has_seq_id();
}
inline ::google::protobuf::uint32 qp_packet::seq_id() const {
  return seq_id_;
}
inline void qp_packet::set_seq_id(::google::protobuf::uint32 value) {
  set_has_seq_id();
  seq_id_ = value;
}

// optional bytes serialized = 3;
inline bool qp_packet::has_serialized() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void qp_packet::set_has_serialized() {
  _has_bits_[0] |= 0x00000004u;
}
inline void qp_packet::clear_has_serialized() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void qp_packet::clear_serialized() {
  if (serialized_ != &::google::protobuf::internal::kEmptyString) {
    serialized_->clear();
  }
  clear_has_serialized();
}
inline const ::std::string& qp_packet::serialized() const {
  return *serialized_;
}
inline void qp_packet::set_serialized(const ::std::string& value) {
  set_has_serialized();
  if (serialized_ == &::google::protobuf::internal::kEmptyString) {
    serialized_ = new ::std::string;
  }
  serialized_->assign(value);
}
inline void qp_packet::set_serialized(const char* value) {
  set_has_serialized();
  if (serialized_ == &::google::protobuf::internal::kEmptyString) {
    serialized_ = new ::std::string;
  }
  serialized_->assign(value);
}
inline void qp_packet::set_serialized(const void* value, size_t size) {
  set_has_serialized();
  if (serialized_ == &::google::protobuf::internal::kEmptyString) {
    serialized_ = new ::std::string;
  }
  serialized_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* qp_packet::mutable_serialized() {
  set_has_serialized();
  if (serialized_ == &::google::protobuf::internal::kEmptyString) {
    serialized_ = new ::std::string;
  }
  return serialized_;
}
inline ::std::string* qp_packet::release_serialized() {
  clear_has_serialized();
  if (serialized_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serialized_;
    serialized_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void qp_packet::set_allocated_serialized(::std::string* serialized) {
  if (serialized_ != &::google::protobuf::internal::kEmptyString) {
    delete serialized_;
  }
  if (serialized) {
    set_has_serialized();
    serialized_ = serialized;
  } else {
    clear_has_serialized();
    serialized_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// qp_login_req

// required string account = 1;
inline bool qp_login_req::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qp_login_req::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qp_login_req::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qp_login_req::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& qp_login_req::account() const {
  return *account_;
}
inline void qp_login_req::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void qp_login_req::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void qp_login_req::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* qp_login_req::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* qp_login_req::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void qp_login_req::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// qp_user_data

// required uint32 user_id = 1;
inline bool qp_user_data::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qp_user_data::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qp_user_data::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qp_user_data::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 qp_user_data::user_id() const {
  return user_id_;
}
inline void qp_user_data::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required int64 gold = 2;
inline bool qp_user_data::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void qp_user_data::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void qp_user_data::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void qp_user_data::clear_gold() {
  gold_ = GOOGLE_LONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::int64 qp_user_data::gold() const {
  return gold_;
}
inline void qp_user_data::set_gold(::google::protobuf::int64 value) {
  set_has_gold();
  gold_ = value;
}

// required string avatar_url = 3;
inline bool qp_user_data::has_avatar_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void qp_user_data::set_has_avatar_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void qp_user_data::clear_has_avatar_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void qp_user_data::clear_avatar_url() {
  if (avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    avatar_url_->clear();
  }
  clear_has_avatar_url();
}
inline const ::std::string& qp_user_data::avatar_url() const {
  return *avatar_url_;
}
inline void qp_user_data::set_avatar_url(const ::std::string& value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
}
inline void qp_user_data::set_avatar_url(const char* value) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(value);
}
inline void qp_user_data::set_avatar_url(const char* value, size_t size) {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    avatar_url_ = new ::std::string;
  }
  avatar_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* qp_user_data::mutable_avatar_url() {
  set_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    avatar_url_ = new ::std::string;
  }
  return avatar_url_;
}
inline ::std::string* qp_user_data::release_avatar_url() {
  clear_has_avatar_url();
  if (avatar_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = avatar_url_;
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void qp_user_data::set_allocated_avatar_url(::std::string* avatar_url) {
  if (avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_url_;
  }
  if (avatar_url) {
    set_has_avatar_url();
    avatar_url_ = avatar_url;
  } else {
    clear_has_avatar_url();
    avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string nick_name = 4;
inline bool qp_user_data::has_nick_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void qp_user_data::set_has_nick_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void qp_user_data::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void qp_user_data::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& qp_user_data::nick_name() const {
  return *nick_name_;
}
inline void qp_user_data::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void qp_user_data::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void qp_user_data::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* qp_user_data::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  return nick_name_;
}
inline ::std::string* qp_user_data::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void qp_user_data::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// qp_login_rsp

// required int32 state = 1;
inline bool qp_login_rsp::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qp_login_rsp::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qp_login_rsp::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qp_login_rsp::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 qp_login_rsp::state() const {
  return state_;
}
inline void qp_login_rsp::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional .qp_server.qp_user_data data = 2;
inline bool qp_login_rsp::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void qp_login_rsp::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void qp_login_rsp::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void qp_login_rsp::clear_data() {
  if (data_ != NULL) data_->::qp_server::qp_user_data::Clear();
  clear_has_data();
}
inline const ::qp_server::qp_user_data& qp_login_rsp::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::qp_server::qp_user_data* qp_login_rsp::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::qp_server::qp_user_data;
  return data_;
}
inline ::qp_server::qp_user_data* qp_login_rsp::release_data() {
  clear_has_data();
  ::qp_server::qp_user_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void qp_login_rsp::set_allocated_data(::qp_server::qp_user_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// qp_create_room_req

// required int32 room_type = 1;
inline bool qp_create_room_req::has_room_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qp_create_room_req::set_has_room_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qp_create_room_req::clear_has_room_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qp_create_room_req::clear_room_type() {
  room_type_ = 0;
  clear_has_room_type();
}
inline ::google::protobuf::int32 qp_create_room_req::room_type() const {
  return room_type_;
}
inline void qp_create_room_req::set_room_type(::google::protobuf::int32 value) {
  set_has_room_type();
  room_type_ = value;
}

// -------------------------------------------------------------------

// qp_create_room_rsp

// required int32 state = 1;
inline bool qp_create_room_rsp::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qp_create_room_rsp::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qp_create_room_rsp::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qp_create_room_rsp::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 qp_create_room_rsp::state() const {
  return state_;
}
inline void qp_create_room_rsp::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 room_id = 2;
inline bool qp_create_room_rsp::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void qp_create_room_rsp::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void qp_create_room_rsp::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void qp_create_room_rsp::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 qp_create_room_rsp::room_id() const {
  return room_id_;
}
inline void qp_create_room_rsp::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional int32 seat_number = 3;
inline bool qp_create_room_rsp::has_seat_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void qp_create_room_rsp::set_has_seat_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void qp_create_room_rsp::clear_has_seat_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void qp_create_room_rsp::clear_seat_number() {
  seat_number_ = 0;
  clear_has_seat_number();
}
inline ::google::protobuf::int32 qp_create_room_rsp::seat_number() const {
  return seat_number_;
}
inline void qp_create_room_rsp::set_seat_number(::google::protobuf::int32 value) {
  set_has_seat_number();
  seat_number_ = value;
}

// -------------------------------------------------------------------

// qp_join_room_req

// required int32 room_id = 1;
inline bool qp_join_room_req::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qp_join_room_req::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qp_join_room_req::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qp_join_room_req::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 qp_join_room_req::room_id() const {
  return room_id_;
}
inline void qp_join_room_req::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// -------------------------------------------------------------------

// qp_room_user

// required .qp_server.qp_user_data user_data = 1;
inline bool qp_room_user::has_user_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qp_room_user::set_has_user_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qp_room_user::clear_has_user_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qp_room_user::clear_user_data() {
  if (user_data_ != NULL) user_data_->::qp_server::qp_user_data::Clear();
  clear_has_user_data();
}
inline const ::qp_server::qp_user_data& qp_room_user::user_data() const {
  return user_data_ != NULL ? *user_data_ : *default_instance_->user_data_;
}
inline ::qp_server::qp_user_data* qp_room_user::mutable_user_data() {
  set_has_user_data();
  if (user_data_ == NULL) user_data_ = new ::qp_server::qp_user_data;
  return user_data_;
}
inline ::qp_server::qp_user_data* qp_room_user::release_user_data() {
  clear_has_user_data();
  ::qp_server::qp_user_data* temp = user_data_;
  user_data_ = NULL;
  return temp;
}
inline void qp_room_user::set_allocated_user_data(::qp_server::qp_user_data* user_data) {
  delete user_data_;
  user_data_ = user_data;
  if (user_data) {
    set_has_user_data();
  } else {
    clear_has_user_data();
  }
}

// required int32 seat_number = 2;
inline bool qp_room_user::has_seat_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void qp_room_user::set_has_seat_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void qp_room_user::clear_has_seat_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void qp_room_user::clear_seat_number() {
  seat_number_ = 0;
  clear_has_seat_number();
}
inline ::google::protobuf::int32 qp_room_user::seat_number() const {
  return seat_number_;
}
inline void qp_room_user::set_seat_number(::google::protobuf::int32 value) {
  set_has_seat_number();
  seat_number_ = value;
}

// required bool is_ready = 3;
inline bool qp_room_user::has_is_ready() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void qp_room_user::set_has_is_ready() {
  _has_bits_[0] |= 0x00000004u;
}
inline void qp_room_user::clear_has_is_ready() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void qp_room_user::clear_is_ready() {
  is_ready_ = false;
  clear_has_is_ready();
}
inline bool qp_room_user::is_ready() const {
  return is_ready_;
}
inline void qp_room_user::set_is_ready(bool value) {
  set_has_is_ready();
  is_ready_ = value;
}

// -------------------------------------------------------------------

// qp_join_room_rsp

// required int32 result = 1;
inline bool qp_join_room_rsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qp_join_room_rsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qp_join_room_rsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qp_join_room_rsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 qp_join_room_rsp::result() const {
  return result_;
}
inline void qp_join_room_rsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 seat_number = 2;
inline bool qp_join_room_rsp::has_seat_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void qp_join_room_rsp::set_has_seat_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void qp_join_room_rsp::clear_has_seat_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void qp_join_room_rsp::clear_seat_number() {
  seat_number_ = 0;
  clear_has_seat_number();
}
inline ::google::protobuf::int32 qp_join_room_rsp::seat_number() const {
  return seat_number_;
}
inline void qp_join_room_rsp::set_seat_number(::google::protobuf::int32 value) {
  set_has_seat_number();
  seat_number_ = value;
}

// optional bool is_ready = 3;
inline bool qp_join_room_rsp::has_is_ready() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void qp_join_room_rsp::set_has_is_ready() {
  _has_bits_[0] |= 0x00000004u;
}
inline void qp_join_room_rsp::clear_has_is_ready() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void qp_join_room_rsp::clear_is_ready() {
  is_ready_ = false;
  clear_has_is_ready();
}
inline bool qp_join_room_rsp::is_ready() const {
  return is_ready_;
}
inline void qp_join_room_rsp::set_is_ready(bool value) {
  set_has_is_ready();
  is_ready_ = value;
}

// repeated .qp_server.qp_room_user room_user = 4;
inline int qp_join_room_rsp::room_user_size() const {
  return room_user_.size();
}
inline void qp_join_room_rsp::clear_room_user() {
  room_user_.Clear();
}
inline const ::qp_server::qp_room_user& qp_join_room_rsp::room_user(int index) const {
  return room_user_.Get(index);
}
inline ::qp_server::qp_room_user* qp_join_room_rsp::mutable_room_user(int index) {
  return room_user_.Mutable(index);
}
inline ::qp_server::qp_room_user* qp_join_room_rsp::add_room_user() {
  return room_user_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::qp_server::qp_room_user >&
qp_join_room_rsp::room_user() const {
  return room_user_;
}
inline ::google::protobuf::RepeatedPtrField< ::qp_server::qp_room_user >*
qp_join_room_rsp::mutable_room_user() {
  return &room_user_;
}

// -------------------------------------------------------------------

// qp_join_room_push

// required .qp_server.qp_room_user room_user = 1;
inline bool qp_join_room_push::has_room_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qp_join_room_push::set_has_room_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qp_join_room_push::clear_has_room_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qp_join_room_push::clear_room_user() {
  if (room_user_ != NULL) room_user_->::qp_server::qp_room_user::Clear();
  clear_has_room_user();
}
inline const ::qp_server::qp_room_user& qp_join_room_push::room_user() const {
  return room_user_ != NULL ? *room_user_ : *default_instance_->room_user_;
}
inline ::qp_server::qp_room_user* qp_join_room_push::mutable_room_user() {
  set_has_room_user();
  if (room_user_ == NULL) room_user_ = new ::qp_server::qp_room_user;
  return room_user_;
}
inline ::qp_server::qp_room_user* qp_join_room_push::release_room_user() {
  clear_has_room_user();
  ::qp_server::qp_room_user* temp = room_user_;
  room_user_ = NULL;
  return temp;
}
inline void qp_join_room_push::set_allocated_room_user(::qp_server::qp_room_user* room_user) {
  delete room_user_;
  room_user_ = room_user;
  if (room_user) {
    set_has_room_user();
  } else {
    clear_has_room_user();
  }
}

// -------------------------------------------------------------------

// qp_ready_req

// required bool ready_state = 1;
inline bool qp_ready_req::has_ready_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qp_ready_req::set_has_ready_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qp_ready_req::clear_has_ready_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qp_ready_req::clear_ready_state() {
  ready_state_ = false;
  clear_has_ready_state();
}
inline bool qp_ready_req::ready_state() const {
  return ready_state_;
}
inline void qp_ready_req::set_ready_state(bool value) {
  set_has_ready_state();
  ready_state_ = value;
}

// -------------------------------------------------------------------

// qp_ready_rsp

// required int32 state = 1;
inline bool qp_ready_rsp::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qp_ready_rsp::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qp_ready_rsp::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qp_ready_rsp::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 qp_ready_rsp::state() const {
  return state_;
}
inline void qp_ready_rsp::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional bool ready_state = 2;
inline bool qp_ready_rsp::has_ready_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void qp_ready_rsp::set_has_ready_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void qp_ready_rsp::clear_has_ready_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void qp_ready_rsp::clear_ready_state() {
  ready_state_ = false;
  clear_has_ready_state();
}
inline bool qp_ready_rsp::ready_state() const {
  return ready_state_;
}
inline void qp_ready_rsp::set_ready_state(bool value) {
  set_has_ready_state();
  ready_state_ = value;
}

// -------------------------------------------------------------------

// qp_ready_push

// required int32 seat_number = 1;
inline bool qp_ready_push::has_seat_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qp_ready_push::set_has_seat_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qp_ready_push::clear_has_seat_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qp_ready_push::clear_seat_number() {
  seat_number_ = 0;
  clear_has_seat_number();
}
inline ::google::protobuf::int32 qp_ready_push::seat_number() const {
  return seat_number_;
}
inline void qp_ready_push::set_seat_number(::google::protobuf::int32 value) {
  set_has_seat_number();
  seat_number_ = value;
}

// required bool ready_state = 2;
inline bool qp_ready_push::has_ready_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void qp_ready_push::set_has_ready_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void qp_ready_push::clear_has_ready_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void qp_ready_push::clear_ready_state() {
  ready_state_ = false;
  clear_has_ready_state();
}
inline bool qp_ready_push::ready_state() const {
  return ready_state_;
}
inline void qp_ready_push::set_ready_state(bool value) {
  set_has_ready_state();
  ready_state_ = value;
}

// -------------------------------------------------------------------

// qp_exit_room_req

// required int32 seat_number = 1;
inline bool qp_exit_room_req::has_seat_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qp_exit_room_req::set_has_seat_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qp_exit_room_req::clear_has_seat_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qp_exit_room_req::clear_seat_number() {
  seat_number_ = 0;
  clear_has_seat_number();
}
inline ::google::protobuf::int32 qp_exit_room_req::seat_number() const {
  return seat_number_;
}
inline void qp_exit_room_req::set_seat_number(::google::protobuf::int32 value) {
  set_has_seat_number();
  seat_number_ = value;
}

// -------------------------------------------------------------------

// qp_exit_room_rsp

// required int32 result = 1;
inline bool qp_exit_room_rsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qp_exit_room_rsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qp_exit_room_rsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qp_exit_room_rsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 qp_exit_room_rsp::result() const {
  return result_;
}
inline void qp_exit_room_rsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// qp_exit_room_push

// required int32 seat_number = 1;
inline bool qp_exit_room_push::has_seat_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qp_exit_room_push::set_has_seat_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qp_exit_room_push::clear_has_seat_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qp_exit_room_push::clear_seat_number() {
  seat_number_ = 0;
  clear_has_seat_number();
}
inline ::google::protobuf::int32 qp_exit_room_push::seat_number() const {
  return seat_number_;
}
inline void qp_exit_room_push::set_seat_number(::google::protobuf::int32 value) {
  set_has_seat_number();
  seat_number_ = value;
}

// -------------------------------------------------------------------

// qp_room_dismiss_push

// required int32 room_id = 1;
inline bool qp_room_dismiss_push::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qp_room_dismiss_push::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qp_room_dismiss_push::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qp_room_dismiss_push::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 qp_room_dismiss_push::room_id() const {
  return room_id_;
}
inline void qp_room_dismiss_push::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// -------------------------------------------------------------------

// qp_game_data

// required string game_name = 1;
inline bool qp_game_data::has_game_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qp_game_data::set_has_game_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qp_game_data::clear_has_game_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qp_game_data::clear_game_name() {
  if (game_name_ != &::google::protobuf::internal::kEmptyString) {
    game_name_->clear();
  }
  clear_has_game_name();
}
inline const ::std::string& qp_game_data::game_name() const {
  return *game_name_;
}
inline void qp_game_data::set_game_name(const ::std::string& value) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::kEmptyString) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(value);
}
inline void qp_game_data::set_game_name(const char* value) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::kEmptyString) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(value);
}
inline void qp_game_data::set_game_name(const char* value, size_t size) {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::kEmptyString) {
    game_name_ = new ::std::string;
  }
  game_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* qp_game_data::mutable_game_name() {
  set_has_game_name();
  if (game_name_ == &::google::protobuf::internal::kEmptyString) {
    game_name_ = new ::std::string;
  }
  return game_name_;
}
inline ::std::string* qp_game_data::release_game_name() {
  clear_has_game_name();
  if (game_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = game_name_;
    game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void qp_game_data::set_allocated_game_name(::std::string* game_name) {
  if (game_name_ != &::google::protobuf::internal::kEmptyString) {
    delete game_name_;
  }
  if (game_name) {
    set_has_game_name();
    game_name_ = game_name;
  } else {
    clear_has_game_name();
    game_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes game_data = 2;
inline bool qp_game_data::has_game_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void qp_game_data::set_has_game_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void qp_game_data::clear_has_game_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void qp_game_data::clear_game_data() {
  if (game_data_ != &::google::protobuf::internal::kEmptyString) {
    game_data_->clear();
  }
  clear_has_game_data();
}
inline const ::std::string& qp_game_data::game_data() const {
  return *game_data_;
}
inline void qp_game_data::set_game_data(const ::std::string& value) {
  set_has_game_data();
  if (game_data_ == &::google::protobuf::internal::kEmptyString) {
    game_data_ = new ::std::string;
  }
  game_data_->assign(value);
}
inline void qp_game_data::set_game_data(const char* value) {
  set_has_game_data();
  if (game_data_ == &::google::protobuf::internal::kEmptyString) {
    game_data_ = new ::std::string;
  }
  game_data_->assign(value);
}
inline void qp_game_data::set_game_data(const void* value, size_t size) {
  set_has_game_data();
  if (game_data_ == &::google::protobuf::internal::kEmptyString) {
    game_data_ = new ::std::string;
  }
  game_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* qp_game_data::mutable_game_data() {
  set_has_game_data();
  if (game_data_ == &::google::protobuf::internal::kEmptyString) {
    game_data_ = new ::std::string;
  }
  return game_data_;
}
inline ::std::string* qp_game_data::release_game_data() {
  clear_has_game_data();
  if (game_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = game_data_;
    game_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void qp_game_data::set_allocated_game_data(::std::string* game_data) {
  if (game_data_ != &::google::protobuf::internal::kEmptyString) {
    delete game_data_;
  }
  if (game_data) {
    set_has_game_data();
    game_data_ = game_data;
  } else {
    clear_has_game_data();
    game_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// qp_ping_req

// required int32 seat_number = 1;
inline bool qp_ping_req::has_seat_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qp_ping_req::set_has_seat_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qp_ping_req::clear_has_seat_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qp_ping_req::clear_seat_number() {
  seat_number_ = 0;
  clear_has_seat_number();
}
inline ::google::protobuf::int32 qp_ping_req::seat_number() const {
  return seat_number_;
}
inline void qp_ping_req::set_seat_number(::google::protobuf::int32 value) {
  set_has_seat_number();
  seat_number_ = value;
}

// -------------------------------------------------------------------

// qp_ping_rsp

// required int32 seat_number = 1;
inline bool qp_ping_rsp::has_seat_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void qp_ping_rsp::set_has_seat_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void qp_ping_rsp::clear_has_seat_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void qp_ping_rsp::clear_seat_number() {
  seat_number_ = 0;
  clear_has_seat_number();
}
inline ::google::protobuf::int32 qp_ping_rsp::seat_number() const {
  return seat_number_;
}
inline void qp_ping_rsp::set_seat_number(::google::protobuf::int32 value) {
  set_has_seat_number();
  seat_number_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace qp_server

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::qp_server::ws_cmd>() {
  return ::qp_server::ws_cmd_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
