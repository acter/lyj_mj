// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace qp_server {

namespace {

const ::google::protobuf::Descriptor* qp_packet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qp_packet_reflection_ = NULL;
const ::google::protobuf::Descriptor* qp_login_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qp_login_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* qp_user_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qp_user_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* qp_login_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qp_login_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* qp_create_room_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qp_create_room_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* qp_create_room_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qp_create_room_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* qp_join_room_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qp_join_room_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* qp_room_user_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qp_room_user_reflection_ = NULL;
const ::google::protobuf::Descriptor* qp_join_room_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qp_join_room_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* qp_join_room_push_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qp_join_room_push_reflection_ = NULL;
const ::google::protobuf::Descriptor* qp_ready_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qp_ready_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* qp_ready_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qp_ready_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* qp_ready_push_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qp_ready_push_reflection_ = NULL;
const ::google::protobuf::Descriptor* qp_exit_room_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qp_exit_room_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* qp_exit_room_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qp_exit_room_rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* qp_exit_room_push_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qp_exit_room_push_reflection_ = NULL;
const ::google::protobuf::Descriptor* qp_room_dismiss_push_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qp_room_dismiss_push_reflection_ = NULL;
const ::google::protobuf::Descriptor* qp_game_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qp_game_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* qp_ping_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qp_ping_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* qp_ping_rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  qp_ping_rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ws_cmd_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2eproto() {
  protobuf_AddDesc_common_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common.proto");
  GOOGLE_CHECK(file != NULL);
  qp_packet_descriptor_ = file->message_type(0);
  static const int qp_packet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_packet, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_packet, seq_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_packet, serialized_),
  };
  qp_packet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qp_packet_descriptor_,
      qp_packet::default_instance_,
      qp_packet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_packet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_packet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qp_packet));
  qp_login_req_descriptor_ = file->message_type(1);
  static const int qp_login_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_login_req, account_),
  };
  qp_login_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qp_login_req_descriptor_,
      qp_login_req::default_instance_,
      qp_login_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_login_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_login_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qp_login_req));
  qp_user_data_descriptor_ = file->message_type(2);
  static const int qp_user_data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_user_data, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_user_data, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_user_data, avatar_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_user_data, nick_name_),
  };
  qp_user_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qp_user_data_descriptor_,
      qp_user_data::default_instance_,
      qp_user_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_user_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_user_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qp_user_data));
  qp_login_rsp_descriptor_ = file->message_type(3);
  static const int qp_login_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_login_rsp, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_login_rsp, data_),
  };
  qp_login_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qp_login_rsp_descriptor_,
      qp_login_rsp::default_instance_,
      qp_login_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_login_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_login_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qp_login_rsp));
  qp_create_room_req_descriptor_ = file->message_type(4);
  static const int qp_create_room_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_create_room_req, room_type_),
  };
  qp_create_room_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qp_create_room_req_descriptor_,
      qp_create_room_req::default_instance_,
      qp_create_room_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_create_room_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_create_room_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qp_create_room_req));
  qp_create_room_rsp_descriptor_ = file->message_type(5);
  static const int qp_create_room_rsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_create_room_rsp, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_create_room_rsp, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_create_room_rsp, seat_number_),
  };
  qp_create_room_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qp_create_room_rsp_descriptor_,
      qp_create_room_rsp::default_instance_,
      qp_create_room_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_create_room_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_create_room_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qp_create_room_rsp));
  qp_join_room_req_descriptor_ = file->message_type(6);
  static const int qp_join_room_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_join_room_req, room_id_),
  };
  qp_join_room_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qp_join_room_req_descriptor_,
      qp_join_room_req::default_instance_,
      qp_join_room_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_join_room_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_join_room_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qp_join_room_req));
  qp_room_user_descriptor_ = file->message_type(7);
  static const int qp_room_user_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_room_user, user_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_room_user, seat_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_room_user, is_ready_),
  };
  qp_room_user_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qp_room_user_descriptor_,
      qp_room_user::default_instance_,
      qp_room_user_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_room_user, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_room_user, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qp_room_user));
  qp_join_room_rsp_descriptor_ = file->message_type(8);
  static const int qp_join_room_rsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_join_room_rsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_join_room_rsp, seat_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_join_room_rsp, is_ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_join_room_rsp, room_user_),
  };
  qp_join_room_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qp_join_room_rsp_descriptor_,
      qp_join_room_rsp::default_instance_,
      qp_join_room_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_join_room_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_join_room_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qp_join_room_rsp));
  qp_join_room_push_descriptor_ = file->message_type(9);
  static const int qp_join_room_push_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_join_room_push, room_user_),
  };
  qp_join_room_push_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qp_join_room_push_descriptor_,
      qp_join_room_push::default_instance_,
      qp_join_room_push_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_join_room_push, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_join_room_push, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qp_join_room_push));
  qp_ready_req_descriptor_ = file->message_type(10);
  static const int qp_ready_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_ready_req, ready_state_),
  };
  qp_ready_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qp_ready_req_descriptor_,
      qp_ready_req::default_instance_,
      qp_ready_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_ready_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_ready_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qp_ready_req));
  qp_ready_rsp_descriptor_ = file->message_type(11);
  static const int qp_ready_rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_ready_rsp, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_ready_rsp, ready_state_),
  };
  qp_ready_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qp_ready_rsp_descriptor_,
      qp_ready_rsp::default_instance_,
      qp_ready_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_ready_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_ready_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qp_ready_rsp));
  qp_ready_push_descriptor_ = file->message_type(12);
  static const int qp_ready_push_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_ready_push, seat_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_ready_push, ready_state_),
  };
  qp_ready_push_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qp_ready_push_descriptor_,
      qp_ready_push::default_instance_,
      qp_ready_push_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_ready_push, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_ready_push, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qp_ready_push));
  qp_exit_room_req_descriptor_ = file->message_type(13);
  static const int qp_exit_room_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_exit_room_req, seat_number_),
  };
  qp_exit_room_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qp_exit_room_req_descriptor_,
      qp_exit_room_req::default_instance_,
      qp_exit_room_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_exit_room_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_exit_room_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qp_exit_room_req));
  qp_exit_room_rsp_descriptor_ = file->message_type(14);
  static const int qp_exit_room_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_exit_room_rsp, result_),
  };
  qp_exit_room_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qp_exit_room_rsp_descriptor_,
      qp_exit_room_rsp::default_instance_,
      qp_exit_room_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_exit_room_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_exit_room_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qp_exit_room_rsp));
  qp_exit_room_push_descriptor_ = file->message_type(15);
  static const int qp_exit_room_push_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_exit_room_push, seat_number_),
  };
  qp_exit_room_push_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qp_exit_room_push_descriptor_,
      qp_exit_room_push::default_instance_,
      qp_exit_room_push_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_exit_room_push, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_exit_room_push, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qp_exit_room_push));
  qp_room_dismiss_push_descriptor_ = file->message_type(16);
  static const int qp_room_dismiss_push_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_room_dismiss_push, room_id_),
  };
  qp_room_dismiss_push_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qp_room_dismiss_push_descriptor_,
      qp_room_dismiss_push::default_instance_,
      qp_room_dismiss_push_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_room_dismiss_push, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_room_dismiss_push, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qp_room_dismiss_push));
  qp_game_data_descriptor_ = file->message_type(17);
  static const int qp_game_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_game_data, game_data_),
  };
  qp_game_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qp_game_data_descriptor_,
      qp_game_data::default_instance_,
      qp_game_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_game_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_game_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qp_game_data));
  qp_ping_req_descriptor_ = file->message_type(18);
  static const int qp_ping_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_ping_req, seat_number_),
  };
  qp_ping_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qp_ping_req_descriptor_,
      qp_ping_req::default_instance_,
      qp_ping_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_ping_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_ping_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qp_ping_req));
  qp_ping_rsp_descriptor_ = file->message_type(19);
  static const int qp_ping_rsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_ping_rsp, seat_number_),
  };
  qp_ping_rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      qp_ping_rsp_descriptor_,
      qp_ping_rsp::default_instance_,
      qp_ping_rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_ping_rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(qp_ping_rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(qp_ping_rsp));
  ws_cmd_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qp_packet_descriptor_, &qp_packet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qp_login_req_descriptor_, &qp_login_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qp_user_data_descriptor_, &qp_user_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qp_login_rsp_descriptor_, &qp_login_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qp_create_room_req_descriptor_, &qp_create_room_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qp_create_room_rsp_descriptor_, &qp_create_room_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qp_join_room_req_descriptor_, &qp_join_room_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qp_room_user_descriptor_, &qp_room_user::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qp_join_room_rsp_descriptor_, &qp_join_room_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qp_join_room_push_descriptor_, &qp_join_room_push::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qp_ready_req_descriptor_, &qp_ready_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qp_ready_rsp_descriptor_, &qp_ready_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qp_ready_push_descriptor_, &qp_ready_push::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qp_exit_room_req_descriptor_, &qp_exit_room_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qp_exit_room_rsp_descriptor_, &qp_exit_room_rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qp_exit_room_push_descriptor_, &qp_exit_room_push::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qp_room_dismiss_push_descriptor_, &qp_room_dismiss_push::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qp_game_data_descriptor_, &qp_game_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qp_ping_req_descriptor_, &qp_ping_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    qp_ping_rsp_descriptor_, &qp_ping_rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2eproto() {
  delete qp_packet::default_instance_;
  delete qp_packet_reflection_;
  delete qp_login_req::default_instance_;
  delete qp_login_req_reflection_;
  delete qp_user_data::default_instance_;
  delete qp_user_data_reflection_;
  delete qp_login_rsp::default_instance_;
  delete qp_login_rsp_reflection_;
  delete qp_create_room_req::default_instance_;
  delete qp_create_room_req_reflection_;
  delete qp_create_room_rsp::default_instance_;
  delete qp_create_room_rsp_reflection_;
  delete qp_join_room_req::default_instance_;
  delete qp_join_room_req_reflection_;
  delete qp_room_user::default_instance_;
  delete qp_room_user_reflection_;
  delete qp_join_room_rsp::default_instance_;
  delete qp_join_room_rsp_reflection_;
  delete qp_join_room_push::default_instance_;
  delete qp_join_room_push_reflection_;
  delete qp_ready_req::default_instance_;
  delete qp_ready_req_reflection_;
  delete qp_ready_rsp::default_instance_;
  delete qp_ready_rsp_reflection_;
  delete qp_ready_push::default_instance_;
  delete qp_ready_push_reflection_;
  delete qp_exit_room_req::default_instance_;
  delete qp_exit_room_req_reflection_;
  delete qp_exit_room_rsp::default_instance_;
  delete qp_exit_room_rsp_reflection_;
  delete qp_exit_room_push::default_instance_;
  delete qp_exit_room_push_reflection_;
  delete qp_room_dismiss_push::default_instance_;
  delete qp_room_dismiss_push_reflection_;
  delete qp_game_data::default_instance_;
  delete qp_game_data_reflection_;
  delete qp_ping_req::default_instance_;
  delete qp_ping_req_reflection_;
  delete qp_ping_rsp::default_instance_;
  delete qp_ping_rsp_reflection_;
}

void protobuf_AddDesc_common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014common.proto\022\tqp_server\"<\n\tqp_packet\022\013"
    "\n\003cmd\030\001 \002(\005\022\016\n\006seq_id\030\002 \002(\r\022\022\n\nserialize"
    "d\030\003 \001(\014\"\037\n\014qp_login_req\022\017\n\007account\030\001 \002(\t"
    "\"T\n\014qp_user_data\022\017\n\007user_id\030\001 \002(\r\022\014\n\004gol"
    "d\030\002 \002(\003\022\022\n\navatar_url\030\003 \002(\t\022\021\n\tnick_name"
    "\030\004 \002(\t\"D\n\014qp_login_rsp\022\r\n\005state\030\001 \002(\005\022%\n"
    "\004data\030\002 \001(\0132\027.qp_server.qp_user_data\"\'\n\022"
    "qp_create_room_req\022\021\n\troom_type\030\001 \002(\005\"I\n"
    "\022qp_create_room_rsp\022\r\n\005state\030\001 \002(\005\022\017\n\007ro"
    "om_id\030\002 \001(\005\022\023\n\013seat_number\030\003 \001(\005\"#\n\020qp_j"
    "oin_room_req\022\017\n\007room_id\030\001 \002(\005\"a\n\014qp_room"
    "_user\022*\n\tuser_data\030\001 \002(\0132\027.qp_server.qp_"
    "user_data\022\023\n\013seat_number\030\002 \002(\005\022\020\n\010is_rea"
    "dy\030\003 \002(\010\"u\n\020qp_join_room_rsp\022\016\n\006result\030\001"
    " \002(\005\022\023\n\013seat_number\030\002 \001(\005\022\020\n\010is_ready\030\003 "
    "\001(\010\022*\n\troom_user\030\004 \003(\0132\027.qp_server.qp_ro"
    "om_user\"\?\n\021qp_join_room_push\022*\n\troom_use"
    "r\030\001 \002(\0132\027.qp_server.qp_room_user\"#\n\014qp_r"
    "eady_req\022\023\n\013ready_state\030\001 \002(\010\"2\n\014qp_read"
    "y_rsp\022\r\n\005state\030\001 \002(\005\022\023\n\013ready_state\030\002 \001("
    "\010\"9\n\rqp_ready_push\022\023\n\013seat_number\030\001 \002(\005\022"
    "\023\n\013ready_state\030\002 \002(\010\"\'\n\020qp_exit_room_req"
    "\022\023\n\013seat_number\030\001 \002(\005\"\"\n\020qp_exit_room_rs"
    "p\022\016\n\006result\030\001 \002(\005\"(\n\021qp_exit_room_push\022\023"
    "\n\013seat_number\030\001 \002(\005\"\'\n\024qp_room_dismiss_p"
    "ush\022\017\n\007room_id\030\001 \002(\005\"!\n\014qp_game_data\022\021\n\t"
    "game_data\030\001 \002(\014\"\"\n\013qp_ping_req\022\023\n\013seat_n"
    "umber\030\001 \002(\005\"\"\n\013qp_ping_rsp\022\023\n\013seat_numbe"
    "r\030\001 \002(\005*\275\003\n\006ws_cmd\022\025\n\020CMD_QP_LOGIN_REQ\020\351"
    "\007\022\025\n\020CMD_QP_LOGIN_RSP\020\352\007\022\033\n\026CMD_QP_CREAT"
    "E_ROOM_REQ\020\353\007\022\033\n\026CMD_QP_CREATE_ROOM_RSP\020"
    "\354\007\022\031\n\024CMD_QP_JOIN_ROOM_REQ\020\355\007\022\031\n\024CMD_QP_"
    "JOIN_ROOM_RSP\020\356\007\022\032\n\025CMD_QP_JOIN_ROOM_PUS"
    "H\020\357\007\022\025\n\020CMD_QP_READY_REQ\020\360\007\022\025\n\020CMD_QP_RE"
    "ADY_RSP\020\361\007\022\026\n\021CMD_QP_READY_PUSH\020\362\007\022\031\n\024CM"
    "D_QP_EXIT_ROOM_REQ\020\363\007\022\031\n\024CMD_QP_EXIT_ROO"
    "M_RSP\020\364\007\022\032\n\025CMD_QP_EXIT_ROOM_PUSH\020\365\007\022\036\n\031"
    "CMD_QP_ROOM_DISSMISS_PUSH\020\366\007\022\025\n\020CMD_QP_G"
    "AME_DATA\020\367\007\022\024\n\017CMD_QP_PING_REQ\020\370\007\022\024\n\017CMD"
    "_QP_PING_RSP\020\371\007", 1575);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
  qp_packet::default_instance_ = new qp_packet();
  qp_login_req::default_instance_ = new qp_login_req();
  qp_user_data::default_instance_ = new qp_user_data();
  qp_login_rsp::default_instance_ = new qp_login_rsp();
  qp_create_room_req::default_instance_ = new qp_create_room_req();
  qp_create_room_rsp::default_instance_ = new qp_create_room_rsp();
  qp_join_room_req::default_instance_ = new qp_join_room_req();
  qp_room_user::default_instance_ = new qp_room_user();
  qp_join_room_rsp::default_instance_ = new qp_join_room_rsp();
  qp_join_room_push::default_instance_ = new qp_join_room_push();
  qp_ready_req::default_instance_ = new qp_ready_req();
  qp_ready_rsp::default_instance_ = new qp_ready_rsp();
  qp_ready_push::default_instance_ = new qp_ready_push();
  qp_exit_room_req::default_instance_ = new qp_exit_room_req();
  qp_exit_room_rsp::default_instance_ = new qp_exit_room_rsp();
  qp_exit_room_push::default_instance_ = new qp_exit_room_push();
  qp_room_dismiss_push::default_instance_ = new qp_room_dismiss_push();
  qp_game_data::default_instance_ = new qp_game_data();
  qp_ping_req::default_instance_ = new qp_ping_req();
  qp_ping_rsp::default_instance_ = new qp_ping_rsp();
  qp_packet::default_instance_->InitAsDefaultInstance();
  qp_login_req::default_instance_->InitAsDefaultInstance();
  qp_user_data::default_instance_->InitAsDefaultInstance();
  qp_login_rsp::default_instance_->InitAsDefaultInstance();
  qp_create_room_req::default_instance_->InitAsDefaultInstance();
  qp_create_room_rsp::default_instance_->InitAsDefaultInstance();
  qp_join_room_req::default_instance_->InitAsDefaultInstance();
  qp_room_user::default_instance_->InitAsDefaultInstance();
  qp_join_room_rsp::default_instance_->InitAsDefaultInstance();
  qp_join_room_push::default_instance_->InitAsDefaultInstance();
  qp_ready_req::default_instance_->InitAsDefaultInstance();
  qp_ready_rsp::default_instance_->InitAsDefaultInstance();
  qp_ready_push::default_instance_->InitAsDefaultInstance();
  qp_exit_room_req::default_instance_->InitAsDefaultInstance();
  qp_exit_room_rsp::default_instance_->InitAsDefaultInstance();
  qp_exit_room_push::default_instance_->InitAsDefaultInstance();
  qp_room_dismiss_push::default_instance_->InitAsDefaultInstance();
  qp_game_data::default_instance_->InitAsDefaultInstance();
  qp_ping_req::default_instance_->InitAsDefaultInstance();
  qp_ping_rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2eproto {
  StaticDescriptorInitializer_common_2eproto() {
    protobuf_AddDesc_common_2eproto();
  }
} static_descriptor_initializer_common_2eproto_;
const ::google::protobuf::EnumDescriptor* ws_cmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ws_cmd_descriptor_;
}
bool ws_cmd_IsValid(int value) {
  switch(value) {
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int qp_packet::kCmdFieldNumber;
const int qp_packet::kSeqIdFieldNumber;
const int qp_packet::kSerializedFieldNumber;
#endif  // !_MSC_VER

qp_packet::qp_packet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void qp_packet::InitAsDefaultInstance() {
}

qp_packet::qp_packet(const qp_packet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void qp_packet::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  seq_id_ = 0u;
  serialized_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qp_packet::~qp_packet() {
  SharedDtor();
}

void qp_packet::SharedDtor() {
  if (serialized_ != &::google::protobuf::internal::kEmptyString) {
    delete serialized_;
  }
  if (this != default_instance_) {
  }
}

void qp_packet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qp_packet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qp_packet_descriptor_;
}

const qp_packet& qp_packet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

qp_packet* qp_packet::default_instance_ = NULL;

qp_packet* qp_packet::New() const {
  return new qp_packet;
}

void qp_packet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    seq_id_ = 0u;
    if (has_serialized()) {
      if (serialized_ != &::google::protobuf::internal::kEmptyString) {
        serialized_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qp_packet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seq_id;
        break;
      }

      // required uint32 seq_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_id_)));
          set_has_seq_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_serialized;
        break;
      }

      // optional bytes serialized = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialized:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void qp_packet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }

  // required uint32 seq_id = 2;
  if (has_seq_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->seq_id(), output);
  }

  // optional bytes serialized = 3;
  if (has_serialized()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->serialized(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* qp_packet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }

  // required uint32 seq_id = 2;
  if (has_seq_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->seq_id(), target);
  }

  // optional bytes serialized = 3;
  if (has_serialized()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->serialized(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int qp_packet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }

    // required uint32 seq_id = 2;
    if (has_seq_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_id());
    }

    // optional bytes serialized = 3;
    if (has_serialized()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qp_packet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qp_packet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qp_packet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qp_packet::MergeFrom(const qp_packet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_seq_id()) {
      set_seq_id(from.seq_id());
    }
    if (from.has_serialized()) {
      set_serialized(from.serialized());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qp_packet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qp_packet::CopyFrom(const qp_packet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qp_packet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void qp_packet::Swap(qp_packet* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(seq_id_, other->seq_id_);
    std::swap(serialized_, other->serialized_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qp_packet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qp_packet_descriptor_;
  metadata.reflection = qp_packet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qp_login_req::kAccountFieldNumber;
#endif  // !_MSC_VER

qp_login_req::qp_login_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void qp_login_req::InitAsDefaultInstance() {
}

qp_login_req::qp_login_req(const qp_login_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void qp_login_req::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qp_login_req::~qp_login_req() {
  SharedDtor();
}

void qp_login_req::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void qp_login_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qp_login_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qp_login_req_descriptor_;
}

const qp_login_req& qp_login_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

qp_login_req* qp_login_req::default_instance_ = NULL;

qp_login_req* qp_login_req::New() const {
  return new qp_login_req;
}

void qp_login_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qp_login_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void qp_login_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* qp_login_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int qp_login_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qp_login_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qp_login_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qp_login_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qp_login_req::MergeFrom(const qp_login_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qp_login_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qp_login_req::CopyFrom(const qp_login_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qp_login_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void qp_login_req::Swap(qp_login_req* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qp_login_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qp_login_req_descriptor_;
  metadata.reflection = qp_login_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qp_user_data::kUserIdFieldNumber;
const int qp_user_data::kGoldFieldNumber;
const int qp_user_data::kAvatarUrlFieldNumber;
const int qp_user_data::kNickNameFieldNumber;
#endif  // !_MSC_VER

qp_user_data::qp_user_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void qp_user_data::InitAsDefaultInstance() {
}

qp_user_data::qp_user_data(const qp_user_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void qp_user_data::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  gold_ = GOOGLE_LONGLONG(0);
  avatar_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qp_user_data::~qp_user_data() {
  SharedDtor();
}

void qp_user_data::SharedDtor() {
  if (avatar_url_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_url_;
  }
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (this != default_instance_) {
  }
}

void qp_user_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qp_user_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qp_user_data_descriptor_;
}

const qp_user_data& qp_user_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

qp_user_data* qp_user_data::default_instance_ = NULL;

qp_user_data* qp_user_data::New() const {
  return new qp_user_data;
}

void qp_user_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    gold_ = GOOGLE_LONGLONG(0);
    if (has_avatar_url()) {
      if (avatar_url_ != &::google::protobuf::internal::kEmptyString) {
        avatar_url_->clear();
      }
    }
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qp_user_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // required int64 gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_avatar_url;
        break;
      }

      // required string avatar_url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->avatar_url().data(), this->avatar_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nick_name;
        break;
      }

      // required string nick_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void qp_user_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required int64 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->gold(), output);
  }

  // required string avatar_url = 3;
  if (has_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->avatar_url(), output);
  }

  // required string nick_name = 4;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->nick_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* qp_user_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required int64 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->gold(), target);
  }

  // required string avatar_url = 3;
  if (has_avatar_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avatar_url().data(), this->avatar_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->avatar_url(), target);
  }

  // required string nick_name = 4;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->nick_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int qp_user_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required int64 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // required string avatar_url = 3;
    if (has_avatar_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar_url());
    }

    // required string nick_name = 4;
    if (has_nick_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qp_user_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qp_user_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qp_user_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qp_user_data::MergeFrom(const qp_user_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_avatar_url()) {
      set_avatar_url(from.avatar_url());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qp_user_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qp_user_data::CopyFrom(const qp_user_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qp_user_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void qp_user_data::Swap(qp_user_data* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(gold_, other->gold_);
    std::swap(avatar_url_, other->avatar_url_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qp_user_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qp_user_data_descriptor_;
  metadata.reflection = qp_user_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qp_login_rsp::kStateFieldNumber;
const int qp_login_rsp::kDataFieldNumber;
#endif  // !_MSC_VER

qp_login_rsp::qp_login_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void qp_login_rsp::InitAsDefaultInstance() {
  data_ = const_cast< ::qp_server::qp_user_data*>(&::qp_server::qp_user_data::default_instance());
}

qp_login_rsp::qp_login_rsp(const qp_login_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void qp_login_rsp::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qp_login_rsp::~qp_login_rsp() {
  SharedDtor();
}

void qp_login_rsp::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void qp_login_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qp_login_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qp_login_rsp_descriptor_;
}

const qp_login_rsp& qp_login_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

qp_login_rsp* qp_login_rsp::default_instance_ = NULL;

qp_login_rsp* qp_login_rsp::New() const {
  return new qp_login_rsp;
}

void qp_login_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::qp_server::qp_user_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qp_login_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .qp_server.qp_user_data data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void qp_login_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional .qp_server.qp_user_data data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* qp_login_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // optional .qp_server.qp_user_data data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int qp_login_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional .qp_server.qp_user_data data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qp_login_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qp_login_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qp_login_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qp_login_rsp::MergeFrom(const qp_login_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_data()) {
      mutable_data()->::qp_server::qp_user_data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qp_login_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qp_login_rsp::CopyFrom(const qp_login_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qp_login_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void qp_login_rsp::Swap(qp_login_rsp* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qp_login_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qp_login_rsp_descriptor_;
  metadata.reflection = qp_login_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qp_create_room_req::kRoomTypeFieldNumber;
#endif  // !_MSC_VER

qp_create_room_req::qp_create_room_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void qp_create_room_req::InitAsDefaultInstance() {
}

qp_create_room_req::qp_create_room_req(const qp_create_room_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void qp_create_room_req::SharedCtor() {
  _cached_size_ = 0;
  room_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qp_create_room_req::~qp_create_room_req() {
  SharedDtor();
}

void qp_create_room_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void qp_create_room_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qp_create_room_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qp_create_room_req_descriptor_;
}

const qp_create_room_req& qp_create_room_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

qp_create_room_req* qp_create_room_req::default_instance_ = NULL;

qp_create_room_req* qp_create_room_req::New() const {
  return new qp_create_room_req;
}

void qp_create_room_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qp_create_room_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 room_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_type_)));
          set_has_room_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void qp_create_room_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 room_type = 1;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* qp_create_room_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 room_type = 1;
  if (has_room_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int qp_create_room_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 room_type = 1;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qp_create_room_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qp_create_room_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qp_create_room_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qp_create_room_req::MergeFrom(const qp_create_room_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qp_create_room_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qp_create_room_req::CopyFrom(const qp_create_room_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qp_create_room_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void qp_create_room_req::Swap(qp_create_room_req* other) {
  if (other != this) {
    std::swap(room_type_, other->room_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qp_create_room_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qp_create_room_req_descriptor_;
  metadata.reflection = qp_create_room_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qp_create_room_rsp::kStateFieldNumber;
const int qp_create_room_rsp::kRoomIdFieldNumber;
const int qp_create_room_rsp::kSeatNumberFieldNumber;
#endif  // !_MSC_VER

qp_create_room_rsp::qp_create_room_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void qp_create_room_rsp::InitAsDefaultInstance() {
}

qp_create_room_rsp::qp_create_room_rsp(const qp_create_room_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void qp_create_room_rsp::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  room_id_ = 0;
  seat_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qp_create_room_rsp::~qp_create_room_rsp() {
  SharedDtor();
}

void qp_create_room_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void qp_create_room_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qp_create_room_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qp_create_room_rsp_descriptor_;
}

const qp_create_room_rsp& qp_create_room_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

qp_create_room_rsp* qp_create_room_rsp::default_instance_ = NULL;

qp_create_room_rsp* qp_create_room_rsp::New() const {
  return new qp_create_room_rsp;
}

void qp_create_room_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    room_id_ = 0;
    seat_number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qp_create_room_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seat_number;
        break;
      }

      // optional int32 seat_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_number_)));
          set_has_seat_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void qp_create_room_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  // optional int32 seat_number = 3;
  if (has_seat_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* qp_create_room_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  // optional int32 seat_number = 3;
  if (has_seat_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seat_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int qp_create_room_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional int32 seat_number = 3;
    if (has_seat_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qp_create_room_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qp_create_room_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qp_create_room_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qp_create_room_rsp::MergeFrom(const qp_create_room_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_seat_number()) {
      set_seat_number(from.seat_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qp_create_room_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qp_create_room_rsp::CopyFrom(const qp_create_room_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qp_create_room_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void qp_create_room_rsp::Swap(qp_create_room_rsp* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(room_id_, other->room_id_);
    std::swap(seat_number_, other->seat_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qp_create_room_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qp_create_room_rsp_descriptor_;
  metadata.reflection = qp_create_room_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qp_join_room_req::kRoomIdFieldNumber;
#endif  // !_MSC_VER

qp_join_room_req::qp_join_room_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void qp_join_room_req::InitAsDefaultInstance() {
}

qp_join_room_req::qp_join_room_req(const qp_join_room_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void qp_join_room_req::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qp_join_room_req::~qp_join_room_req() {
  SharedDtor();
}

void qp_join_room_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void qp_join_room_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qp_join_room_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qp_join_room_req_descriptor_;
}

const qp_join_room_req& qp_join_room_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

qp_join_room_req* qp_join_room_req::default_instance_ = NULL;

qp_join_room_req* qp_join_room_req::New() const {
  return new qp_join_room_req;
}

void qp_join_room_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qp_join_room_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void qp_join_room_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* qp_join_room_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int qp_join_room_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qp_join_room_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qp_join_room_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qp_join_room_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qp_join_room_req::MergeFrom(const qp_join_room_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qp_join_room_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qp_join_room_req::CopyFrom(const qp_join_room_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qp_join_room_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void qp_join_room_req::Swap(qp_join_room_req* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qp_join_room_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qp_join_room_req_descriptor_;
  metadata.reflection = qp_join_room_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qp_room_user::kUserDataFieldNumber;
const int qp_room_user::kSeatNumberFieldNumber;
const int qp_room_user::kIsReadyFieldNumber;
#endif  // !_MSC_VER

qp_room_user::qp_room_user()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void qp_room_user::InitAsDefaultInstance() {
  user_data_ = const_cast< ::qp_server::qp_user_data*>(&::qp_server::qp_user_data::default_instance());
}

qp_room_user::qp_room_user(const qp_room_user& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void qp_room_user::SharedCtor() {
  _cached_size_ = 0;
  user_data_ = NULL;
  seat_number_ = 0;
  is_ready_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qp_room_user::~qp_room_user() {
  SharedDtor();
}

void qp_room_user::SharedDtor() {
  if (this != default_instance_) {
    delete user_data_;
  }
}

void qp_room_user::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qp_room_user::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qp_room_user_descriptor_;
}

const qp_room_user& qp_room_user::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

qp_room_user* qp_room_user::default_instance_ = NULL;

qp_room_user* qp_room_user::New() const {
  return new qp_room_user;
}

void qp_room_user::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_data()) {
      if (user_data_ != NULL) user_data_->::qp_server::qp_user_data::Clear();
    }
    seat_number_ = 0;
    is_ready_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qp_room_user::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .qp_server.qp_user_data user_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seat_number;
        break;
      }

      // required int32 seat_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_number_)));
          set_has_seat_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_ready;
        break;
      }

      // required bool is_ready = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ready_)));
          set_has_is_ready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void qp_room_user::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .qp_server.qp_user_data user_data = 1;
  if (has_user_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_data(), output);
  }

  // required int32 seat_number = 2;
  if (has_seat_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_number(), output);
  }

  // required bool is_ready = 3;
  if (has_is_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_ready(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* qp_room_user::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .qp_server.qp_user_data user_data = 1;
  if (has_user_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_data(), target);
  }

  // required int32 seat_number = 2;
  if (has_seat_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_number(), target);
  }

  // required bool is_ready = 3;
  if (has_is_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_ready(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int qp_room_user::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .qp_server.qp_user_data user_data = 1;
    if (has_user_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_data());
    }

    // required int32 seat_number = 2;
    if (has_seat_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_number());
    }

    // required bool is_ready = 3;
    if (has_is_ready()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qp_room_user::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qp_room_user* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qp_room_user*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qp_room_user::MergeFrom(const qp_room_user& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_data()) {
      mutable_user_data()->::qp_server::qp_user_data::MergeFrom(from.user_data());
    }
    if (from.has_seat_number()) {
      set_seat_number(from.seat_number());
    }
    if (from.has_is_ready()) {
      set_is_ready(from.is_ready());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qp_room_user::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qp_room_user::CopyFrom(const qp_room_user& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qp_room_user::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_user_data()) {
    if (!this->user_data().IsInitialized()) return false;
  }
  return true;
}

void qp_room_user::Swap(qp_room_user* other) {
  if (other != this) {
    std::swap(user_data_, other->user_data_);
    std::swap(seat_number_, other->seat_number_);
    std::swap(is_ready_, other->is_ready_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qp_room_user::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qp_room_user_descriptor_;
  metadata.reflection = qp_room_user_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qp_join_room_rsp::kResultFieldNumber;
const int qp_join_room_rsp::kSeatNumberFieldNumber;
const int qp_join_room_rsp::kIsReadyFieldNumber;
const int qp_join_room_rsp::kRoomUserFieldNumber;
#endif  // !_MSC_VER

qp_join_room_rsp::qp_join_room_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void qp_join_room_rsp::InitAsDefaultInstance() {
}

qp_join_room_rsp::qp_join_room_rsp(const qp_join_room_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void qp_join_room_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  seat_number_ = 0;
  is_ready_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qp_join_room_rsp::~qp_join_room_rsp() {
  SharedDtor();
}

void qp_join_room_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void qp_join_room_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qp_join_room_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qp_join_room_rsp_descriptor_;
}

const qp_join_room_rsp& qp_join_room_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

qp_join_room_rsp* qp_join_room_rsp::default_instance_ = NULL;

qp_join_room_rsp* qp_join_room_rsp::New() const {
  return new qp_join_room_rsp;
}

void qp_join_room_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    seat_number_ = 0;
    is_ready_ = false;
  }
  room_user_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qp_join_room_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seat_number;
        break;
      }

      // optional int32 seat_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_number_)));
          set_has_seat_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_ready;
        break;
      }

      // optional bool is_ready = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ready_)));
          set_has_is_ready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_room_user;
        break;
      }

      // repeated .qp_server.qp_room_user room_user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_room_user;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void qp_join_room_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional int32 seat_number = 2;
  if (has_seat_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_number(), output);
  }

  // optional bool is_ready = 3;
  if (has_is_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_ready(), output);
  }

  // repeated .qp_server.qp_room_user room_user = 4;
  for (int i = 0; i < this->room_user_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->room_user(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* qp_join_room_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional int32 seat_number = 2;
  if (has_seat_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_number(), target);
  }

  // optional bool is_ready = 3;
  if (has_is_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_ready(), target);
  }

  // repeated .qp_server.qp_room_user room_user = 4;
  for (int i = 0; i < this->room_user_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->room_user(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int qp_join_room_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 seat_number = 2;
    if (has_seat_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_number());
    }

    // optional bool is_ready = 3;
    if (has_is_ready()) {
      total_size += 1 + 1;
    }

  }
  // repeated .qp_server.qp_room_user room_user = 4;
  total_size += 1 * this->room_user_size();
  for (int i = 0; i < this->room_user_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_user(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qp_join_room_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qp_join_room_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qp_join_room_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qp_join_room_rsp::MergeFrom(const qp_join_room_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_user_.MergeFrom(from.room_user_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_seat_number()) {
      set_seat_number(from.seat_number());
    }
    if (from.has_is_ready()) {
      set_is_ready(from.is_ready());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qp_join_room_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qp_join_room_rsp::CopyFrom(const qp_join_room_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qp_join_room_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < room_user_size(); i++) {
    if (!this->room_user(i).IsInitialized()) return false;
  }
  return true;
}

void qp_join_room_rsp::Swap(qp_join_room_rsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(seat_number_, other->seat_number_);
    std::swap(is_ready_, other->is_ready_);
    room_user_.Swap(&other->room_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qp_join_room_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qp_join_room_rsp_descriptor_;
  metadata.reflection = qp_join_room_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qp_join_room_push::kRoomUserFieldNumber;
#endif  // !_MSC_VER

qp_join_room_push::qp_join_room_push()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void qp_join_room_push::InitAsDefaultInstance() {
  room_user_ = const_cast< ::qp_server::qp_room_user*>(&::qp_server::qp_room_user::default_instance());
}

qp_join_room_push::qp_join_room_push(const qp_join_room_push& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void qp_join_room_push::SharedCtor() {
  _cached_size_ = 0;
  room_user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qp_join_room_push::~qp_join_room_push() {
  SharedDtor();
}

void qp_join_room_push::SharedDtor() {
  if (this != default_instance_) {
    delete room_user_;
  }
}

void qp_join_room_push::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qp_join_room_push::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qp_join_room_push_descriptor_;
}

const qp_join_room_push& qp_join_room_push::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

qp_join_room_push* qp_join_room_push::default_instance_ = NULL;

qp_join_room_push* qp_join_room_push::New() const {
  return new qp_join_room_push;
}

void qp_join_room_push::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_room_user()) {
      if (room_user_ != NULL) room_user_->::qp_server::qp_room_user::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qp_join_room_push::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .qp_server.qp_room_user room_user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void qp_join_room_push::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .qp_server.qp_room_user room_user = 1;
  if (has_room_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->room_user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* qp_join_room_push::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .qp_server.qp_room_user room_user = 1;
  if (has_room_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->room_user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int qp_join_room_push::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .qp_server.qp_room_user room_user = 1;
    if (has_room_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->room_user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qp_join_room_push::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qp_join_room_push* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qp_join_room_push*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qp_join_room_push::MergeFrom(const qp_join_room_push& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_user()) {
      mutable_room_user()->::qp_server::qp_room_user::MergeFrom(from.room_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qp_join_room_push::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qp_join_room_push::CopyFrom(const qp_join_room_push& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qp_join_room_push::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_room_user()) {
    if (!this->room_user().IsInitialized()) return false;
  }
  return true;
}

void qp_join_room_push::Swap(qp_join_room_push* other) {
  if (other != this) {
    std::swap(room_user_, other->room_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qp_join_room_push::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qp_join_room_push_descriptor_;
  metadata.reflection = qp_join_room_push_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qp_ready_req::kReadyStateFieldNumber;
#endif  // !_MSC_VER

qp_ready_req::qp_ready_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void qp_ready_req::InitAsDefaultInstance() {
}

qp_ready_req::qp_ready_req(const qp_ready_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void qp_ready_req::SharedCtor() {
  _cached_size_ = 0;
  ready_state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qp_ready_req::~qp_ready_req() {
  SharedDtor();
}

void qp_ready_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void qp_ready_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qp_ready_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qp_ready_req_descriptor_;
}

const qp_ready_req& qp_ready_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

qp_ready_req* qp_ready_req::default_instance_ = NULL;

qp_ready_req* qp_ready_req::New() const {
  return new qp_ready_req;
}

void qp_ready_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ready_state_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qp_ready_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool ready_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_state_)));
          set_has_ready_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void qp_ready_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool ready_state = 1;
  if (has_ready_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ready_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* qp_ready_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool ready_state = 1;
  if (has_ready_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ready_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int qp_ready_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool ready_state = 1;
    if (has_ready_state()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qp_ready_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qp_ready_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qp_ready_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qp_ready_req::MergeFrom(const qp_ready_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ready_state()) {
      set_ready_state(from.ready_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qp_ready_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qp_ready_req::CopyFrom(const qp_ready_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qp_ready_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void qp_ready_req::Swap(qp_ready_req* other) {
  if (other != this) {
    std::swap(ready_state_, other->ready_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qp_ready_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qp_ready_req_descriptor_;
  metadata.reflection = qp_ready_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qp_ready_rsp::kStateFieldNumber;
const int qp_ready_rsp::kReadyStateFieldNumber;
#endif  // !_MSC_VER

qp_ready_rsp::qp_ready_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void qp_ready_rsp::InitAsDefaultInstance() {
}

qp_ready_rsp::qp_ready_rsp(const qp_ready_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void qp_ready_rsp::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ready_state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qp_ready_rsp::~qp_ready_rsp() {
  SharedDtor();
}

void qp_ready_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void qp_ready_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qp_ready_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qp_ready_rsp_descriptor_;
}

const qp_ready_rsp& qp_ready_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

qp_ready_rsp* qp_ready_rsp::default_instance_ = NULL;

qp_ready_rsp* qp_ready_rsp::New() const {
  return new qp_ready_rsp;
}

void qp_ready_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    ready_state_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qp_ready_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ready_state;
        break;
      }

      // optional bool ready_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_state_)));
          set_has_ready_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void qp_ready_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional bool ready_state = 2;
  if (has_ready_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ready_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* qp_ready_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // optional bool ready_state = 2;
  if (has_ready_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ready_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int qp_ready_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional bool ready_state = 2;
    if (has_ready_state()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qp_ready_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qp_ready_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qp_ready_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qp_ready_rsp::MergeFrom(const qp_ready_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_ready_state()) {
      set_ready_state(from.ready_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qp_ready_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qp_ready_rsp::CopyFrom(const qp_ready_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qp_ready_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void qp_ready_rsp::Swap(qp_ready_rsp* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(ready_state_, other->ready_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qp_ready_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qp_ready_rsp_descriptor_;
  metadata.reflection = qp_ready_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qp_ready_push::kSeatNumberFieldNumber;
const int qp_ready_push::kReadyStateFieldNumber;
#endif  // !_MSC_VER

qp_ready_push::qp_ready_push()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void qp_ready_push::InitAsDefaultInstance() {
}

qp_ready_push::qp_ready_push(const qp_ready_push& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void qp_ready_push::SharedCtor() {
  _cached_size_ = 0;
  seat_number_ = 0;
  ready_state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qp_ready_push::~qp_ready_push() {
  SharedDtor();
}

void qp_ready_push::SharedDtor() {
  if (this != default_instance_) {
  }
}

void qp_ready_push::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qp_ready_push::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qp_ready_push_descriptor_;
}

const qp_ready_push& qp_ready_push::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

qp_ready_push* qp_ready_push::default_instance_ = NULL;

qp_ready_push* qp_ready_push::New() const {
  return new qp_ready_push;
}

void qp_ready_push::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_number_ = 0;
    ready_state_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qp_ready_push::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seat_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_number_)));
          set_has_seat_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ready_state;
        break;
      }

      // required bool ready_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_state_)));
          set_has_ready_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void qp_ready_push::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seat_number = 1;
  if (has_seat_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_number(), output);
  }

  // required bool ready_state = 2;
  if (has_ready_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ready_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* qp_ready_push::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seat_number = 1;
  if (has_seat_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_number(), target);
  }

  // required bool ready_state = 2;
  if (has_ready_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ready_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int qp_ready_push::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seat_number = 1;
    if (has_seat_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_number());
    }

    // required bool ready_state = 2;
    if (has_ready_state()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qp_ready_push::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qp_ready_push* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qp_ready_push*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qp_ready_push::MergeFrom(const qp_ready_push& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_number()) {
      set_seat_number(from.seat_number());
    }
    if (from.has_ready_state()) {
      set_ready_state(from.ready_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qp_ready_push::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qp_ready_push::CopyFrom(const qp_ready_push& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qp_ready_push::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void qp_ready_push::Swap(qp_ready_push* other) {
  if (other != this) {
    std::swap(seat_number_, other->seat_number_);
    std::swap(ready_state_, other->ready_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qp_ready_push::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qp_ready_push_descriptor_;
  metadata.reflection = qp_ready_push_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qp_exit_room_req::kSeatNumberFieldNumber;
#endif  // !_MSC_VER

qp_exit_room_req::qp_exit_room_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void qp_exit_room_req::InitAsDefaultInstance() {
}

qp_exit_room_req::qp_exit_room_req(const qp_exit_room_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void qp_exit_room_req::SharedCtor() {
  _cached_size_ = 0;
  seat_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qp_exit_room_req::~qp_exit_room_req() {
  SharedDtor();
}

void qp_exit_room_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void qp_exit_room_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qp_exit_room_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qp_exit_room_req_descriptor_;
}

const qp_exit_room_req& qp_exit_room_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

qp_exit_room_req* qp_exit_room_req::default_instance_ = NULL;

qp_exit_room_req* qp_exit_room_req::New() const {
  return new qp_exit_room_req;
}

void qp_exit_room_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qp_exit_room_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seat_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_number_)));
          set_has_seat_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void qp_exit_room_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seat_number = 1;
  if (has_seat_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* qp_exit_room_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seat_number = 1;
  if (has_seat_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int qp_exit_room_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seat_number = 1;
    if (has_seat_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qp_exit_room_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qp_exit_room_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qp_exit_room_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qp_exit_room_req::MergeFrom(const qp_exit_room_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_number()) {
      set_seat_number(from.seat_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qp_exit_room_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qp_exit_room_req::CopyFrom(const qp_exit_room_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qp_exit_room_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void qp_exit_room_req::Swap(qp_exit_room_req* other) {
  if (other != this) {
    std::swap(seat_number_, other->seat_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qp_exit_room_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qp_exit_room_req_descriptor_;
  metadata.reflection = qp_exit_room_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qp_exit_room_rsp::kResultFieldNumber;
#endif  // !_MSC_VER

qp_exit_room_rsp::qp_exit_room_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void qp_exit_room_rsp::InitAsDefaultInstance() {
}

qp_exit_room_rsp::qp_exit_room_rsp(const qp_exit_room_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void qp_exit_room_rsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qp_exit_room_rsp::~qp_exit_room_rsp() {
  SharedDtor();
}

void qp_exit_room_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void qp_exit_room_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qp_exit_room_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qp_exit_room_rsp_descriptor_;
}

const qp_exit_room_rsp& qp_exit_room_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

qp_exit_room_rsp* qp_exit_room_rsp::default_instance_ = NULL;

qp_exit_room_rsp* qp_exit_room_rsp::New() const {
  return new qp_exit_room_rsp;
}

void qp_exit_room_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qp_exit_room_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void qp_exit_room_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* qp_exit_room_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int qp_exit_room_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qp_exit_room_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qp_exit_room_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qp_exit_room_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qp_exit_room_rsp::MergeFrom(const qp_exit_room_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qp_exit_room_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qp_exit_room_rsp::CopyFrom(const qp_exit_room_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qp_exit_room_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void qp_exit_room_rsp::Swap(qp_exit_room_rsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qp_exit_room_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qp_exit_room_rsp_descriptor_;
  metadata.reflection = qp_exit_room_rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qp_exit_room_push::kSeatNumberFieldNumber;
#endif  // !_MSC_VER

qp_exit_room_push::qp_exit_room_push()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void qp_exit_room_push::InitAsDefaultInstance() {
}

qp_exit_room_push::qp_exit_room_push(const qp_exit_room_push& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void qp_exit_room_push::SharedCtor() {
  _cached_size_ = 0;
  seat_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qp_exit_room_push::~qp_exit_room_push() {
  SharedDtor();
}

void qp_exit_room_push::SharedDtor() {
  if (this != default_instance_) {
  }
}

void qp_exit_room_push::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qp_exit_room_push::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qp_exit_room_push_descriptor_;
}

const qp_exit_room_push& qp_exit_room_push::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

qp_exit_room_push* qp_exit_room_push::default_instance_ = NULL;

qp_exit_room_push* qp_exit_room_push::New() const {
  return new qp_exit_room_push;
}

void qp_exit_room_push::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qp_exit_room_push::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seat_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_number_)));
          set_has_seat_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void qp_exit_room_push::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seat_number = 1;
  if (has_seat_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* qp_exit_room_push::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seat_number = 1;
  if (has_seat_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int qp_exit_room_push::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seat_number = 1;
    if (has_seat_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qp_exit_room_push::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qp_exit_room_push* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qp_exit_room_push*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qp_exit_room_push::MergeFrom(const qp_exit_room_push& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_number()) {
      set_seat_number(from.seat_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qp_exit_room_push::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qp_exit_room_push::CopyFrom(const qp_exit_room_push& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qp_exit_room_push::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void qp_exit_room_push::Swap(qp_exit_room_push* other) {
  if (other != this) {
    std::swap(seat_number_, other->seat_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qp_exit_room_push::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qp_exit_room_push_descriptor_;
  metadata.reflection = qp_exit_room_push_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qp_room_dismiss_push::kRoomIdFieldNumber;
#endif  // !_MSC_VER

qp_room_dismiss_push::qp_room_dismiss_push()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void qp_room_dismiss_push::InitAsDefaultInstance() {
}

qp_room_dismiss_push::qp_room_dismiss_push(const qp_room_dismiss_push& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void qp_room_dismiss_push::SharedCtor() {
  _cached_size_ = 0;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qp_room_dismiss_push::~qp_room_dismiss_push() {
  SharedDtor();
}

void qp_room_dismiss_push::SharedDtor() {
  if (this != default_instance_) {
  }
}

void qp_room_dismiss_push::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qp_room_dismiss_push::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qp_room_dismiss_push_descriptor_;
}

const qp_room_dismiss_push& qp_room_dismiss_push::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

qp_room_dismiss_push* qp_room_dismiss_push::default_instance_ = NULL;

qp_room_dismiss_push* qp_room_dismiss_push::New() const {
  return new qp_room_dismiss_push;
}

void qp_room_dismiss_push::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qp_room_dismiss_push::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 room_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void qp_room_dismiss_push::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* qp_room_dismiss_push::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 room_id = 1;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int qp_room_dismiss_push::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qp_room_dismiss_push::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qp_room_dismiss_push* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qp_room_dismiss_push*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qp_room_dismiss_push::MergeFrom(const qp_room_dismiss_push& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qp_room_dismiss_push::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qp_room_dismiss_push::CopyFrom(const qp_room_dismiss_push& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qp_room_dismiss_push::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void qp_room_dismiss_push::Swap(qp_room_dismiss_push* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qp_room_dismiss_push::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qp_room_dismiss_push_descriptor_;
  metadata.reflection = qp_room_dismiss_push_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qp_game_data::kGameDataFieldNumber;
#endif  // !_MSC_VER

qp_game_data::qp_game_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void qp_game_data::InitAsDefaultInstance() {
}

qp_game_data::qp_game_data(const qp_game_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void qp_game_data::SharedCtor() {
  _cached_size_ = 0;
  game_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qp_game_data::~qp_game_data() {
  SharedDtor();
}

void qp_game_data::SharedDtor() {
  if (game_data_ != &::google::protobuf::internal::kEmptyString) {
    delete game_data_;
  }
  if (this != default_instance_) {
  }
}

void qp_game_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qp_game_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qp_game_data_descriptor_;
}

const qp_game_data& qp_game_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

qp_game_data* qp_game_data::default_instance_ = NULL;

qp_game_data* qp_game_data::New() const {
  return new qp_game_data;
}

void qp_game_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game_data()) {
      if (game_data_ != &::google::protobuf::internal::kEmptyString) {
        game_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qp_game_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes game_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_game_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void qp_game_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes game_data = 1;
  if (has_game_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->game_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* qp_game_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes game_data = 1;
  if (has_game_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->game_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int qp_game_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes game_data = 1;
    if (has_game_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->game_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qp_game_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qp_game_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qp_game_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qp_game_data::MergeFrom(const qp_game_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_data()) {
      set_game_data(from.game_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qp_game_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qp_game_data::CopyFrom(const qp_game_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qp_game_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void qp_game_data::Swap(qp_game_data* other) {
  if (other != this) {
    std::swap(game_data_, other->game_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qp_game_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qp_game_data_descriptor_;
  metadata.reflection = qp_game_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qp_ping_req::kSeatNumberFieldNumber;
#endif  // !_MSC_VER

qp_ping_req::qp_ping_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void qp_ping_req::InitAsDefaultInstance() {
}

qp_ping_req::qp_ping_req(const qp_ping_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void qp_ping_req::SharedCtor() {
  _cached_size_ = 0;
  seat_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qp_ping_req::~qp_ping_req() {
  SharedDtor();
}

void qp_ping_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void qp_ping_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qp_ping_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qp_ping_req_descriptor_;
}

const qp_ping_req& qp_ping_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

qp_ping_req* qp_ping_req::default_instance_ = NULL;

qp_ping_req* qp_ping_req::New() const {
  return new qp_ping_req;
}

void qp_ping_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qp_ping_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seat_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_number_)));
          set_has_seat_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void qp_ping_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seat_number = 1;
  if (has_seat_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* qp_ping_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seat_number = 1;
  if (has_seat_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int qp_ping_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seat_number = 1;
    if (has_seat_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qp_ping_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qp_ping_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qp_ping_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qp_ping_req::MergeFrom(const qp_ping_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_number()) {
      set_seat_number(from.seat_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qp_ping_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qp_ping_req::CopyFrom(const qp_ping_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qp_ping_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void qp_ping_req::Swap(qp_ping_req* other) {
  if (other != this) {
    std::swap(seat_number_, other->seat_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qp_ping_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qp_ping_req_descriptor_;
  metadata.reflection = qp_ping_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int qp_ping_rsp::kSeatNumberFieldNumber;
#endif  // !_MSC_VER

qp_ping_rsp::qp_ping_rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void qp_ping_rsp::InitAsDefaultInstance() {
}

qp_ping_rsp::qp_ping_rsp(const qp_ping_rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void qp_ping_rsp::SharedCtor() {
  _cached_size_ = 0;
  seat_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

qp_ping_rsp::~qp_ping_rsp() {
  SharedDtor();
}

void qp_ping_rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void qp_ping_rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* qp_ping_rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return qp_ping_rsp_descriptor_;
}

const qp_ping_rsp& qp_ping_rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

qp_ping_rsp* qp_ping_rsp::default_instance_ = NULL;

qp_ping_rsp* qp_ping_rsp::New() const {
  return new qp_ping_rsp;
}

void qp_ping_rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool qp_ping_rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seat_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_number_)));
          set_has_seat_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void qp_ping_rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seat_number = 1;
  if (has_seat_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* qp_ping_rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seat_number = 1;
  if (has_seat_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int qp_ping_rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seat_number = 1;
    if (has_seat_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void qp_ping_rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const qp_ping_rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const qp_ping_rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void qp_ping_rsp::MergeFrom(const qp_ping_rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_number()) {
      set_seat_number(from.seat_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void qp_ping_rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qp_ping_rsp::CopyFrom(const qp_ping_rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qp_ping_rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void qp_ping_rsp::Swap(qp_ping_rsp* other) {
  if (other != this) {
    std::swap(seat_number_, other->seat_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata qp_ping_rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = qp_ping_rsp_descriptor_;
  metadata.reflection = qp_ping_rsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace qp_server

// @@protoc_insertion_point(global_scope)
